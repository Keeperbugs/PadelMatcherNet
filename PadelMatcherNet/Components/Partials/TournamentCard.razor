@using PadelMatcherNet.Models

<MudCard Class="@GetCardClass()">
    <MudCardHeader>
        <CardHeaderContent>
            <div style="display: flex; align-items: center; gap: 8px;">
                @if (IsCurrentTournament)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" />
                }
                <MudText Typo="Typo.h6">@Tournament.Name</MudText>
            </div>
            @if (!string.IsNullOrEmpty(Tournament.Description))
            {
                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                    @Tournament.Description
                </MudText>
            }
        </CardHeaderContent>
        <CardHeaderActions>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                <MudMenuItem OnClick="OnEdit">
                    <div style="display: flex; align-items: center;">
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
                        Modifica
                    </div>
                </MudMenuItem>
                @if (!IsCurrentTournament)
                {
                    <MudMenuItem OnClick="OnSelect">
                        <div style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-2" />
                            Seleziona
                        </div>
                    </MudMenuItem>
                }
                <MudMenuItem OnClick="OnDelete">
                    <div style="display: flex; align-items: center;">
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" />
                        Elimina
                    </div>
                </MudMenuItem>
            </MudMenu>
        </CardHeaderActions>
    </MudCardHeader>
    
    <MudCardContent>
        <MudGrid>
            <!-- Status Badge -->
            <MudItem xs="12">
                <MudChip T="string" Size="Size.Small" Color="GetStatusColor(Tournament.Status)">
                    @GetStatusText(Tournament.Status)
                </MudChip>
            </MudItem>
            
            <!-- Date info -->
            @if (Tournament.StartDate.HasValue || Tournament.EndDate.HasValue)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.body2">
                        <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" Class="mr-1" />
                        @if (Tournament.StartDate.HasValue && Tournament.EndDate.HasValue)
                        {
                            <text>@Tournament.StartDate.Value.ToString("dd/MM") - @Tournament.EndDate.Value.ToString("dd/MM/yyyy")</text>
                        }
                        else if (Tournament.StartDate.HasValue)
                        {
                            <text>Dal @Tournament.StartDate.Value.ToString("dd/MM/yyyy")</text>
                        }
                        else if (Tournament.EndDate.HasValue)
                        {
                            <text>Fino al @Tournament.EndDate.Value.ToString("dd/MM/yyyy")</text>
                        }
                    </MudText>
                </MudItem>
            }
            
            <!-- Tournament info -->
            <MudItem xs="12" Class="mt-2">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Informazioni</MudText>
                <MudGrid>
                    <MudItem xs="6" Class="text-center">
                        <MudText Typo="Typo.h6" Color="Color.Primary">@Tournament.CurrentPlayerCount</MudText>
                        <MudText Typo="Typo.caption">Giocatori</MudText>
                    </MudItem>
                    <MudItem xs="6" Class="text-center">
                        <MudText Typo="Typo.h6" Color="Color.Info">@Tournament.CurrentRound</MudText>
                        <MudText Typo="Typo.caption">Round</MudText>
                    </MudItem>
                </MudGrid>
                
                <!-- Progress bar giocatori -->
                <MudProgressLinear Color="Color.Primary" 
                                  Value="@GetPlayerProgress()" 
                                  Class="mt-2">
                    <MudText Typo="Typo.body2">
                        @Tournament.CurrentPlayerCount/@Tournament.MaxPlayers giocatori
                    </MudText>
                </MudProgressLinear>
            </MudItem>
            
            <!-- Tournament settings -->
            <MudItem xs="12" Class="mt-2">
                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                    @Tournament.Days giorni â€¢ @Tournament.MatchesPerDay partite/giorno
                </MudText>
            </MudItem>
        </MudGrid>
    </MudCardContent>
    
    @if (!IsCurrentTournament && Tournament.Status != TournamentStatus.Completed)
    {
        <MudCardActions>
            <MudButton Variant="Variant.Text" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Star"
                      OnClick="OnSelect">
                Seleziona come Corrente
            </MudButton>
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter, EditorRequired] public Tournament Tournament { get; set; } = null!;
    [Parameter] public bool IsCurrentTournament { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback OnSelect { get; set; }

    private string GetCardClass()
    {
        return IsCurrentTournament ? "mud-elevation-8 border-solid border-2 mud-border-primary" : "";
    }

    private Color GetStatusColor(TournamentStatus status)
    {
        return status switch
        {
            TournamentStatus.Active => Color.Success,
            TournamentStatus.Completed => Color.Info,
            TournamentStatus.Draft => Color.Warning,
            _ => Color.Default
        };
    }

    private string GetStatusText(TournamentStatus status)
    {
        return status switch
        {
            TournamentStatus.Active => "Attivo",
            TournamentStatus.Completed => "Completato",
            TournamentStatus.Draft => "Bozza",
            _ => "Sconosciuto"
        };
    }

    private double GetPlayerProgress()
    {
        if (Tournament.MaxPlayers == 0) return 0;
        return (double)Tournament.CurrentPlayerCount / Tournament.MaxPlayers * 100;
    }
}