@using PadelMatcherNet.Models

<MudCard Outlined="true" Class="mb-3">
    <MudCardContent>
        <MudGrid Justify="Justify.Center">
            <!-- Header partita -->
            <MudItem xs="12" Class="d-flex justify-space-between align-center mb-2">
                <div class="d-flex align-center">
                    <MudIcon Icon="@GetMatchFormatIcon(Match.MatchFormat)"
                             Color="@GetMatchFormatColor(Match.MatchFormat)"
                             Class="mr-2" />
                    <MudText Typo="Typo.subtitle1">
                        Round @Match.Round
                    </MudText>
                    @if (!string.IsNullOrEmpty(Match.Court))
                    {
                        <MudText Typo="Typo.caption" Class="ml-2 mud-text-secondary">
                            â€¢ @Match.Court
                        </MudText>
                    }
                </div>
                <MudChip T="string" Color="@GetStatusColor(Match.Status)"
                         Size="Size.Small"
                         Icon="@GetStatusIcon(Match.Status)">
                    @GetStatusText(Match.Status)
                </MudChip>
            </MudItem>

            <!-- Teams -->
            <MudItem xs="5">
                <div class="text-center">
                    <MudText Typo="Typo.body1"
                             Class="@GetTeamClass(Match.Team1.Id, Match.WinnerTeamId)">
                        @GetTeamDisplayName(Match.Team1)
                    </MudText>
                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                        @GetTeamSkillInfo(Match.Team1)
                    </MudText>
                </div>
            </MudItem>

            <!-- Score centrale -->
            <MudItem xs="2">
                <div class="text-center">
                    @if (Match.Status == MatchStatus.Completed || Match.Status == MatchStatus.Draw)
                    {
                        @if (Match.MatchFormat == MatchFormat.UnlimitedSet && Match.Status == MatchStatus.Draw)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Balance"
                                     Color="Color.Info"
                                     Size="Size.Large" />
                            <MudText Typo="Typo.caption" Class="mud-info-text">PAREGGIO</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6" Class="@GetWinnerClass(Match.WinnerTeamId)">
                                @GetScoreDisplay(Match)
                            </MudText>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Class="mud-text-secondary">VS</MudText>
                    }
                </div>
            </MudItem>

            <!-- Team 2 -->
            <MudItem xs="5">
                <div class="text-center">
                    <MudText Typo="Typo.body1"
                             Class="@GetTeamClass(Match.Team2.Id, Match.WinnerTeamId)">
                        @GetTeamDisplayName(Match.Team2)
                    </MudText>
                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                        @GetTeamSkillInfo(Match.Team2)
                    </MudText>
                </div>
            </MudItem>

            <!-- Dettaglio formato e set -->
            @if (Match.Status == MatchStatus.Completed || Match.Status == MatchStatus.Draw)
            {
                <MudItem xs="12">
                    <MudDivider Class="my-2" />
                    <div class="d-flex justify-space-between align-center">
                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                            @GetMatchFormatText(Match.MatchFormat)
                        </MudText>
                        @if (Match.Scores?.Any() == true)
                        {
                            <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                @GetDetailedScoreDisplay(Match)
                            </MudText>
                        }
                    </div>
                </MudItem>
            }
        </MudGrid>
    </MudCardContent>

    <!-- Azioni -->
    @if (ShowActions)
    {
        <MudCardActions Class="d-flex justify-end">
            @if (Match.Status == MatchStatus.Pending || Match.Status == MatchStatus.InProgress)
            {
                <MudButton Size="Size.Small"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Edit"
                           OnClick="OnEditResults">
                    Inserisci Risultati
                </MudButton>
            }
            else
            {
                <MudButton Size="Size.Small"
                           Color="Color.Warning"
                           StartIcon="@Icons.Material.Filled.Edit"
                           OnClick="OnEditResults">
                    Modifica Risultati
                </MudButton>
            }

            <MudButton Size="Size.Small"
                       Color="Color.Info"
                       StartIcon="@Icons.Material.Filled.Settings"
                       OnClick="OnEdit">
                Modifica Partita
            </MudButton>

            <MudButton Size="Size.Small"
                       Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.Delete"
                       OnClick="OnDelete">
                Elimina
            </MudButton>
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter] public Match Match { get; set; } = null!;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public EventCallback OnEditResults { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    private Color GetStatusColor(MatchStatus status)
    {
        return status switch
        {
            MatchStatus.Completed => Color.Success,
            MatchStatus.InProgress => Color.Warning,
            MatchStatus.Pending => Color.Default,
            MatchStatus.Draw => Color.Info,
            _ => Color.Default
        };
    }

    private string GetStatusIcon(MatchStatus status)
    {
        return status switch
        {
            MatchStatus.Completed => Icons.Material.Filled.CheckCircle,
            MatchStatus.InProgress => Icons.Material.Filled.PlayCircle,
            MatchStatus.Pending => Icons.Material.Filled.Schedule,
            MatchStatus.Draw => Icons.Material.Filled.Balance,
            _ => Icons.Material.Filled.Help
        };
    }

    private string GetStatusText(MatchStatus status)
    {
        return status switch
        {
            MatchStatus.Completed => "Completata",
            MatchStatus.InProgress => "In Corso",
            MatchStatus.Pending => "In Attesa",
            MatchStatus.Draw => "Pareggio",
            _ => "Sconosciuto"
        };
    }

    private string GetMatchFormatIcon(MatchFormat format)
    {
        return format switch
        {
            MatchFormat.BestOfThree => Icons.Material.Filled.Filter3,
            MatchFormat.GoldenPoint => Icons.Material.Filled.Bolt,
            MatchFormat.UnlimitedSet => Icons.Material.Filled.AllInclusive,
            _ => Icons.Material.Filled.Sports
        };
    }

    private Color GetMatchFormatColor(MatchFormat format)
    {
        return format switch
        {
            MatchFormat.BestOfThree => Color.Primary,
            MatchFormat.GoldenPoint => Color.Warning,
            MatchFormat.UnlimitedSet => Color.Success,
            _ => Color.Default
        };
    }

    private string GetMatchFormatText(MatchFormat format)
    {
        return format switch
        {
            MatchFormat.BestOfThree => "Al meglio di 3 set",
            MatchFormat.GoldenPoint => "Golden Point",
            MatchFormat.UnlimitedSet => "Set Illimitato",
            _ => "Formato sconosciuto"
        };
    }

    private string GetTeamDisplayName(Team team)
    {
        var player1Name = team.Player1.Nickname ?? team.Player1.Name;
        var player2Name = team.Player2.Nickname ?? team.Player2.Name;

        // Usa iniziali per risparmiare spazio
        var player1Initial = player1Name.Substring(0, 1);
        var player2Initial = player2Name.Substring(0, 1);

        return $"{player1Initial}.{player2Initial}";
    }

    private string GetTeamSkillInfo(Team team)
    {
        return $"{GetSkillLevelShort(team.Player1.SkillLevel)} + {GetSkillLevelShort(team.Player2.SkillLevel)}";
    }

    private string GetSkillLevelShort(SkillLevel skillLevel)
    {
        return skillLevel switch
        {
            SkillLevel.FasciaA => "A",
            SkillLevel.FasciaB => "B",
            SkillLevel.Unassigned => "?",
            _ => "?"
        };
    }

    private string GetTeamClass(string teamId, string? winnerTeamId)
    {
        if (winnerTeamId == teamId)
            return "mud-success-text font-weight-bold";

        return string.Empty;
    }

    private string GetWinnerClass(string? winnerTeamId)
    {
        return !string.IsNullOrEmpty(winnerTeamId) ? "mud-success-text" : "mud-text-secondary";
    }

    private string GetScoreDisplay(Match match)
    {
        if (match.MatchFormat == MatchFormat.GoldenPoint)
        {
            return "GP";
        }

        if (match.MatchFormat == MatchFormat.BestOfThree)
        {
            var team1Sets = 0;
            var team2Sets = 0;

            foreach (var score in match.Scores)
            {
                if (int.TryParse(score.Team1Score?.ToString(), out int team1Score) &&
                    int.TryParse(score.Team2Score?.ToString(), out int team2Score))
                {
                    if (team1Score > team2Score) team1Sets++;
                    else if (team2Score > team1Score) team2Sets++;
                }
            }

            return $"{team1Sets}-{team2Sets}";
        }

        if (match.MatchFormat == MatchFormat.UnlimitedSet && match.Scores.Any())
        {
            var score = match.Scores.First();
            return $"{score.Team1Score}-{score.Team2Score}";
        }

        return "-";
    }

    private string GetDetailedScoreDisplay(Match match)
    {
        if (match.MatchFormat == MatchFormat.GoldenPoint)
        {
            return "Golden Point";
        }

        if (match.MatchFormat == MatchFormat.UnlimitedSet)
        {
            if (match.Status == MatchStatus.Draw)
            {
                var score = match.Scores.FirstOrDefault();
                return score != null ? $"Pareggio {score.Team1Score}-{score.Team2Score}" : "Pareggio";
            }
        }

        var setScores = match.Scores
            .Select(s => $"{s.Team1Score}-{s.Team2Score}")
            .ToList();

        return setScores.Any() ? string.Join(", ", setScores) : "";
    }
}