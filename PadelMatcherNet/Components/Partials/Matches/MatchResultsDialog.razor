@using PadelMatcherNet.Models
@using PadelMatcherNet.Components.Partials.Matches
@using PadelMatcherNet.Services
@using PadelMatcherNet.Components.Partials

<MudDialog @bind-Visible="IsVisible" Options="@(new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium })">
    <DialogContent>
        <MudContainer Style="max-width: 600px;">
            @if (Match != null)
            {
                <MudText Typo="Typo.h6" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.EditNote" Class="mr-2" />
                    @(Match.Status == MatchStatus.Completed ? "Modifica Risultati" : "Inserisci Risultati")
                </MudText>

                <!-- Info Partita -->
                <MudPaper Class="pa-3 mb-4" Style="background-color: var(--mud-palette-background-grey);">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">
                                Round @Match.Round
                                @if (!string.IsNullOrEmpty(Match.Court))
                                {
                                    <text> ‚Ä¢ Campo @Match.Court</text>
                                }
                            </MudText>
                        </MudItem>
                        <MudItem xs="5">
                            <MudText Typo="Typo.body1" Align="Align.Center" Class="@GetTeamClass(Match.Team1.Id)">
                                @GetTeamDisplayName(Match.Team1)
                            </MudText>
                            <MudText Typo="Typo.caption" Align="Align.Center" Class="mud-text-secondary">
                                @GetTeamSkillInfo(Match.Team1)
                            </MudText>
                        </MudItem>
                        <MudItem xs="2">
                            <MudText Typo="Typo.h6" Align="Align.Center" Class="mud-text-secondary">VS</MudText>
                        </MudItem>
                        <MudItem xs="5">
                            <MudText Typo="Typo.body1" Align="Align.Center" Class="@GetTeamClass(Match.Team2.Id)">
                                @GetTeamDisplayName(Match.Team2)
                            </MudText>
                            <MudText Typo="Typo.caption" Align="Align.Center" Class="mud-text-secondary">
                                @GetTeamSkillInfo(Match.Team2)
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>

                <MudForm @ref="form" @bind-IsValid="@isFormValid">
                    @if (Match.MatchFormat == MatchFormat.BestOfThree)
                    {
                        <!-- Best of Three Format -->
                        <MudText Typo="Typo.h6" Class="mb-3">Inserisci Punteggi Set</MudText>
                        
                        @for (int i = 0; i < 3; i++)
                        {
                            var setIndex = i;
                            <MudPaper Class="pa-3 mb-3" Outlined="true">
                                <MudGrid Justify="Justify.Center">
                                    <MudItem xs="2">
                                        <MudText Typo="Typo.subtitle1">Set @(setIndex + 1)</MudText>
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudNumericField @bind-Value="scores[setIndex].Team1Score"
                                                         Label="@GetTeamDisplayName(Match.Team1)"
                                                         Min="0" Max="15"
                                                         Variant="Variant.Outlined"
                                                         Margin="Margin.Dense"
                                                         OnBlur="ValidateScores" />
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudText Typo="Typo.h6" Align="Align.Center">-</MudText>
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudNumericField @bind-Value="scores[setIndex].Team2Score"
                                                         Label="@GetTeamDisplayName(Match.Team2)"
                                                         Min="0" Max="15"
                                                         Variant="Variant.Outlined"
                                                         Margin="Margin.Dense"
                                                         OnBlur="ValidateScores" />
                                    </MudItem>
                                </MudGrid>
                                
                                @if (scores[setIndex].Team1Score.HasValue && scores[setIndex].Team2Score.HasValue)
                                {
                                    var winner = GetSetWinner(scores[setIndex]);
                                    if (!string.IsNullOrEmpty(winner))
                                    {
                                        <MudText Typo="Typo.caption" Class="mt-2 mud-success-text">
                                            üèÜ Vincitore: @winner
                                        </MudText>
                                    }
                                }
                            </MudPaper>
                        }
                        
                        @if (HasValidationErrors())
                        {
                            <MudAlert Severity="Severity.Error" Class="mb-3">
                                @foreach (var error in validationErrors)
                                {
                                    <MudText>‚Ä¢ @error</MudText>
                                }
                            </MudAlert>
                        }
                        
                        @if (GetMatchWinner() != null)
                        {
                            <MudAlert Severity="Severity.Success" Class="mb-3">
                                <MudText Typo="Typo.subtitle1">
                                    üèÜ <strong>Vincitore Partita:</strong> @GetMatchWinner()
                                </MudText>
                            </MudAlert>
                        }
                    }
                    else if (Match.MatchFormat == MatchFormat.GoldenPoint)
                    {
                        <!-- Golden Point Format -->
                        <MudText Typo="Typo.h6" Class="mb-3">Golden Point - Seleziona Vincitore</MudText>
                        
                        <MudRadioGroup @bind-Value="goldenPointWinner" T="string">
                            <MudRadio Value="@Match.Team1.Id" T="string">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Sports" 
                                             Color="@(goldenPointWinner == Match.Team1.Id ? Color.Warning : Color.Default)"
                                             Class="mr-2" />
                                    <div>
                                        <MudText Typo="Typo.body1">@GetTeamDisplayName(Match.Team1)</MudText>
                                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                            @GetTeamSkillInfo(Match.Team1)
                                        </MudText>
                                    </div>
                                </div>
                            </MudRadio>
                            <MudRadio Value="@Match.Team2.Id" T="string">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Sports" 
                                             Color="@(goldenPointWinner == Match.Team2.Id ? Color.Warning : Color.Default)"
                                             Class="mr-2" />
                                    <div>
                                        <MudText Typo="Typo.body1">@GetTeamDisplayName(Match.Team2)</MudText>
                                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                            @GetTeamSkillInfo(Match.Team2)
                                        </MudText>
                                    </div>
                                </div>
                            </MudRadio>
                        </MudRadioGroup>

                        @if (!string.IsNullOrEmpty(goldenPointWinner))
                        {
                            <MudAlert Severity="Severity.Success" Class="mt-3">
                                <MudText>
                                    üèÜ <strong>Vincitore Golden Point:</strong> @GetGoldenPointWinnerName()
                                </MudText>
                            </MudAlert>
                        }
                    }
                    else if (Match.MatchFormat == MatchFormat.UnlimitedSet)
                    {
                        <!-- Unlimited Set Format -->
                        <MudText Typo="Typo.h6" Class="mb-3">Set Illimitato - Inserisci Punteggio Finale</MudText>
                        
                        <MudPaper Class="pa-3 mb-3" Outlined="true">
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="4">
                                    <MudNumericField @bind-Value="unlimitedSetScore.Team1Score"
                                                     Label="@GetTeamDisplayName(Match.Team1)"
                                                     Min="0"
                                                     Variant="Variant.Outlined"
                                                     OnBlur="ValidateUnlimitedSetScore" />
                                </MudItem>
                                <MudItem xs="4" Class="text-center">
                                    <MudText Typo="Typo.h6">-</MudText>
                                    <MudCheckBox @bind-Value="allowDraw" 
                                                 Label="Pareggio" 
                                                 Color="Color.Primary" 
                                                 Size="Size.Small" />
                                </MudItem>
                                <MudItem xs="4">
                                    <MudNumericField @bind-Value="unlimitedSetScore.Team2Score"
                                                     Label="@GetTeamDisplayName(Match.Team2)"
                                                     Min="0"
                                                     Variant="Variant.Outlined"
                                                     OnBlur="ValidateUnlimitedSetScore" />
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                        
                        @if (unlimitedSetScore.Team1Score.HasValue && unlimitedSetScore.Team2Score.HasValue)
                        {
                            var winner = GetUnlimitedSetWinner();
                            <MudAlert Severity="@(winner == "Pareggio" ? Severity.Info : Severity.Success)" Class="mb-3">
                                <MudText>
                                    @if (winner == "Pareggio")
                                    {
                                        <text>ü§ù <strong>Risultato:</strong> Pareggio (@unlimitedSetScore.Team1Score - @unlimitedSetScore.Team2Score)</text>
                                    }
                                    else
                                    {
                                        <text>üèÜ <strong>Vincitore:</strong> @winner (@unlimitedSetScore.Team1Score - @unlimitedSetScore.Team2Score)</text>
                                    }
                                </MudText>
                            </MudAlert>
                        }
                    }
                </MudForm>
            }
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="OnCancel" Variant="Variant.Text">
            Annulla
        </MudButton>
        @if (Match?.Status == MatchStatus.Completed)
        {
            <MudButton OnClick="HandleClearResults" 
                       Variant="Variant.Text" 
                       Color="Color.Warning"
                       StartIcon="@Icons.Material.Filled.Clear">
                Cancella Risultati
            </MudButton>
        }
        <MudButton OnClick="HandleSave" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary"
                   Disabled="@(!CanSave())"
                   StartIcon="@Icons.Material.Filled.Save">
            Salva Risultati
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public Match? Match { get; set; }
    [Parameter] public EventCallback<(Match match, List<MatchSetScore> scores, string? winnerTeamId)> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private MudForm form = null!;
    private bool isFormValid = false;
    private List<ScoreInput> scores = new();
    private string goldenPointWinner = string.Empty;
    private ScoreInput unlimitedSetScore = new() { SetNumber = 1 };
    private bool allowDraw = false;
    private List<string> validationErrors = new();

    protected override void OnParametersSet()
    {
        if (Match != null)
        {
            InitializeScores();
        }
    }

    private void InitializeScores()
    {
        if (Match == null) return;

        if (Match.MatchFormat == MatchFormat.BestOfThree)
        {
            scores = new List<ScoreInput>
            {
                new() { SetNumber = 1 },
                new() { SetNumber = 2 },
                new() { SetNumber = 3 }
            };

                            // Carica punteggi esistenti se presenti
            if (Match.Scores?.Any() == true)
            {
                foreach (var setScore in Match.Scores)
                {
                    if (setScore.SetNumber <= 3)
                    {
                        var scoreInput = scores[setScore.SetNumber - 1];
                        if (int.TryParse(setScore.Team1Score?.ToString(), out int team1Score))
                            scoreInput.Team1Score = team1Score;
                        if (int.TryParse(setScore.Team2Score?.ToString(), out int team2Score))
                            scoreInput.Team2Score = team2Score;
                    }
                }
            }
        }
        else if (Match.MatchFormat == MatchFormat.GoldenPoint)
        {
            goldenPointWinner = Match.WinnerTeamId ?? string.Empty;
        }
        else if (Match.MatchFormat == MatchFormat.UnlimitedSet)
        {
            unlimitedSetScore = new ScoreInput { SetNumber = 1 };
            if (Match.Scores?.Any() == true)
            {
                var setScore = Match.Scores.First();
                if (int.TryParse(setScore.Team1Score?.ToString(), out int team1Score))
                    unlimitedSetScore.Team1Score = team1Score;
                if (int.TryParse(setScore.Team2Score?.ToString(), out int team2Score))
                    unlimitedSetScore.Team2Score = team2Score;
                
                // Verifica se √® un pareggio
                allowDraw = unlimitedSetScore.Team1Score == unlimitedSetScore.Team2Score && 
                           Match.Status == MatchStatus.Draw;
            }
        }
    }

    private void ValidateScores()
    {
        validationErrors.Clear();

        if (Match?.MatchFormat != MatchFormat.BestOfThree) return;

        var validSets = scores.Where(s => s.Team1Score.HasValue && s.Team2Score.HasValue).ToList();
        
        foreach (var score in validSets)
        {
            if (!IsValidSetScore(score.Team1Score!.Value, score.Team2Score!.Value))
            {
                validationErrors.Add($"Set {score.SetNumber}: Punteggio non valido ({score.Team1Score}-{score.Team2Score})");
            }
        }

        StateHasChanged();
    }

    private void ValidateUnlimitedSetScore()
    {
        validationErrors.Clear();

        if (unlimitedSetScore.Team1Score.HasValue && unlimitedSetScore.Team2Score.HasValue)
        {
            if (unlimitedSetScore.Team1Score < 0 || unlimitedSetScore.Team2Score < 0)
            {
                validationErrors.Add("I punteggi non possono essere negativi");
            }
            else if (unlimitedSetScore.Team1Score == unlimitedSetScore.Team2Score && !allowDraw)
            {
                validationErrors.Add("Punteggio in pareggio: seleziona 'Pareggio' per confermare");
            }
        }

        StateHasChanged();
    }

    private bool IsValidSetScore(int score1, int score2)
    {
        // Un set √® valido se:
        // - Almeno uno dei due ha raggiunto 6 punti
        // - Il vincitore ha almeno 2 punti di vantaggio (tranne al tiebreak 7-6)
        // - Il punteggio massimo √® 7-6 o 7-5, ecc.

        if (score1 < 0 || score2 < 0 || score1 > 15 || score2 > 15) return false;
        if (score1 == score2) return false; // No pareggi nei set

        int max = Math.Max(score1, score2);
        int min = Math.Min(score1, score2);

        // Casi validi:
        // 6-0, 6-1, 6-2, 6-3, 6-4 (vittoria netta)
        if (max == 6 && min <= 4) return true;
        
        // 7-5 (vittoria con break di vantaggio)
        if (max == 7 && min == 5) return true;
        
        // 7-6 (tiebreak)
        if (max == 7 && min == 6) return true;

        return false;
    }

    private string GetSetWinner(ScoreInput scoreInput)
    {
        if (!scoreInput.Team1Score.HasValue || !scoreInput.Team2Score.HasValue || Match == null)
            return string.Empty;

        if (scoreInput.Team1Score > scoreInput.Team2Score)
            return GetTeamDisplayName(Match.Team1);
        
        return GetTeamDisplayName(Match.Team2);
    }

    private string? GetMatchWinner()
    {
        if (Match?.MatchFormat != MatchFormat.BestOfThree) return null;

        var validSets = scores.Where(s => s.Team1Score.HasValue && s.Team2Score.HasValue && 
                                         IsValidSetScore(s.Team1Score.Value, s.Team2Score.Value)).ToList();

        var team1Wins = validSets.Count(s => s.Team1Score > s.Team2Score);
        var team2Wins = validSets.Count(s => s.Team2Score > s.Team1Score);

        if (team1Wins >= 2) return GetTeamDisplayName(Match.Team1);
        if (team2Wins >= 2) return GetTeamDisplayName(Match.Team2);

        return null;
    }

    private string GetUnlimitedSetWinner()
    {
        if (!unlimitedSetScore.Team1Score.HasValue || !unlimitedSetScore.Team2Score.HasValue || Match == null)
            return string.Empty;

        if (unlimitedSetScore.Team1Score == unlimitedSetScore.Team2Score && allowDraw)
            return "Pareggio";

        if (unlimitedSetScore.Team1Score > unlimitedSetScore.Team2Score)
            return GetTeamDisplayName(Match.Team1);
        
        return GetTeamDisplayName(Match.Team2);
    }

    private string GetGoldenPointWinnerName()
    {
        if (string.IsNullOrEmpty(goldenPointWinner) || Match == null) return string.Empty;

        return goldenPointWinner == Match.Team1.Id ? 
               GetTeamDisplayName(Match.Team1) : 
               GetTeamDisplayName(Match.Team2);
    }

    private bool CanSave()
    {
        if (Match == null) return false;

        return Match.MatchFormat switch
        {
            MatchFormat.BestOfThree => GetMatchWinner() != null && !HasValidationErrors(),
            MatchFormat.GoldenPoint => !string.IsNullOrEmpty(goldenPointWinner),
            MatchFormat.UnlimitedSet => unlimitedSetScore.Team1Score.HasValue && 
                                       unlimitedSetScore.Team2Score.HasValue && 
                                       !HasValidationErrors(),
            _ => false
        };
    }

    private bool HasValidationErrors() => validationErrors.Any();

    private string? GetWinnerTeamId()
    {
        if (Match == null) return null;

        return Match.MatchFormat switch
        {
            MatchFormat.BestOfThree => GetBestOfThreeWinnerTeamId(),
            MatchFormat.GoldenPoint => goldenPointWinner,
            MatchFormat.UnlimitedSet => GetUnlimitedSetWinnerTeamId(),
            _ => null
        };
    }

    private string? GetBestOfThreeWinnerTeamId()
    {
        var validSets = scores.Where(s => s.Team1Score.HasValue && s.Team2Score.HasValue && 
                                         IsValidSetScore(s.Team1Score.Value, s.Team2Score.Value)).ToList();

        var team1Wins = validSets.Count(s => s.Team1Score > s.Team2Score);
        var team2Wins = validSets.Count(s => s.Team2Score > s.Team1Score);

        if (team1Wins >= 2) return Match?.Team1.Id;
        if (team2Wins >= 2) return Match?.Team2.Id;

        return null;
    }

    private string? GetUnlimitedSetWinnerTeamId()
    {
        if (!unlimitedSetScore.Team1Score.HasValue || !unlimitedSetScore.Team2Score.HasValue || Match == null)
            return null;

        if (unlimitedSetScore.Team1Score == unlimitedSetScore.Team2Score && allowDraw)
            return null; // Pareggio

        return unlimitedSetScore.Team1Score > unlimitedSetScore.Team2Score ? 
               Match.Team1.Id : Match.Team2.Id;
    }

    private string GetTeamClass(string teamId)
    {
        if (Match?.WinnerTeamId == teamId)
            return "mud-success-text font-weight-bold";
        
        return string.Empty;
    }

    private string GetTeamDisplayName(Team team)
    {
        var player1Initial = team.Player1?.Name?.Substring(0, 1) ?? "?";
        var player2Initial = team.Player2?.Name?.Substring(0, 1) ?? "?";
        return $"{player1Initial}.{player2Initial}";
    }

    private string GetTeamSkillInfo(Team team)
    {
        return $"{GetSkillLevelShort(team.Player1.SkillLevel)} + {GetSkillLevelShort(team.Player2.SkillLevel)}";
    }

    private string GetSkillLevelShort(SkillLevel skillLevel)
    {
        return skillLevel switch
        {
            SkillLevel.FasciaA => "A",
            SkillLevel.FasciaB => "B",
            SkillLevel.Unassigned => "?",
            _ => "?"
        };
    }

    private async Task HandleSave()
    {
        if (!CanSave() || Match == null) return;

        var matchScores = new List<MatchSetScore>();
        var winnerTeamId = GetWinnerTeamId();

        if (Match.MatchFormat == MatchFormat.BestOfThree)
        {
            // Filtra solo i set con punteggi validi
            matchScores = scores
                .Where(s => s.Team1Score.HasValue && s.Team2Score.HasValue &&
                           IsValidSetScore(s.Team1Score.Value, s.Team2Score.Value))
                .Select(s => new MatchSetScore
                {
                    SetNumber = s.SetNumber,
                    Team1Score = s.Team1Score!.Value.ToString(),
                    Team2Score = s.Team2Score!.Value.ToString()
                })
                .ToList();
        }
        else if (Match.MatchFormat == MatchFormat.GoldenPoint)
        {
            // Per Golden Point, crea un score simbolico
            matchScores.Add(new MatchSetScore
            {
                SetNumber = 1,
                Team1Score = goldenPointWinner == Match.Team1.Id ? "GP" : "0",
                Team2Score = goldenPointWinner == Match.Team2.Id ? "GP" : "0"
            });
        }
        else if (Match.MatchFormat == MatchFormat.UnlimitedSet)
        {
            // Per set illimitato
            matchScores.Add(new MatchSetScore
            {
                SetNumber = 1,
                Team1Score = unlimitedSetScore.Team1Score!.Value.ToString(),
                Team2Score = unlimitedSetScore.Team2Score!.Value.ToString()
            });
        }

        await OnSave.InvokeAsync((Match, matchScores, winnerTeamId));
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task HandleClearResults()
    {
        if (Match == null) return;

        await OnSave.InvokeAsync((Match, new List<MatchSetScore>(), null));
        await VisibleChanged.InvokeAsync(false);
    }

    private class ScoreInput
    {
        public int SetNumber { get; set; }
        public int? Team1Score { get; set; }
        public int? Team2Score { get; set; }
    }
}