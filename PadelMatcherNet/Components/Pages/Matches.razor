@page "/matches"
@using PadelMatcherNet.Models
@using PadelMatcherNet.Services
@using PadelMatcherNet.Components.Partials
@using PadelMatcherNet.Components.Partials.Matches
@inject IMatchService MatchService
@inject ITournamentService TournamentService
@inject IDialogService DialogService
@inject IStatsService StatsService

@attribute [Authorize]

<PageTitle>Gestione Partite</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Gestione Partite</MudText>
    
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (currentTournament == null)
    {
        <NoTournamentSelected />
    }
    else
    {
        <TournamentMatches 
            CurrentTournament="currentTournament"
            Matches="matches"
            FilteredMatches="filteredMatches"
            TournamentPlayers="tournamentPlayers"
            OnClearPending="EventCallback.Factory.Create(this, ClearPendingMatches)"
            OnRecalculateStats="EventCallback.Factory.Create(this, RecalculateStats)"
            OnGenerateMatches="EventCallback.Factory.Create(this, ShowGenerateMatchesDialog)"
            OnEditResults="EventCallback.Factory.Create<Match>(this, ShowResultsDialog)"
            OnEditMatch="EventCallback.Factory.Create<Match>(this, ShowEditMatchDialog)"
            OnDeleteMatch="EventCallback.Factory.Create<Match>(this, DeleteMatch)"
            OnFilterChanged="EventCallback.Factory.Create<(int? Round, MatchStatus? Status)>(this, ApplyFilters)"
        />
    }
</MudContainer>

@if (showGenerateDialog)
{
    <GenerateMatchesDialog 
        Tournament="currentTournament"
        Players="tournamentPlayers"
        OnGenerate="HandleGenerateFromDialog"
        OnCancel="() => showGenerateDialog = false" />
}

@if (showResultsDialog && selectedMatch != null)
{
    <MatchResultsDialog 
        IsVisible="showResultsDialog"
        Match="selectedMatch"
        OnSave="SaveResultsFromDialog"
        OnCancel="() => showResultsDialog = false" />
}

@if (showEditDialog && selectedMatch != null)
{
    <MatchEditDialog 
        @bind-Visible="showEditDialog"
        Match="selectedMatch"
        Players="tournamentPlayers"
        OnSave="SaveMatchFromDialog"
        OnCancel="() => showEditDialog = false" />
}

@code {
    private bool isLoading = true;
    private Tournament? currentTournament = null;
    private List<Match> matches = new();
    private List<Match> filteredMatches = new();
    private List<Player> tournamentPlayers = new();
    private bool showGenerateDialog = false;
    private bool showResultsDialog = false;
    private bool showEditDialog = false;
    private Match? selectedMatch = null;
    
    // Variabili per i filtri
    private int? roundFilter = null;
    private MatchStatus? statusFilter = null;

    protected override async Task OnInitializedAsync() => await LoadData();

    private void ShowGenerateMatchesDialog()
    {
        showGenerateDialog = true;
        StateHasChanged();
    }

    private void ShowResultsDialog(Match match)
    {
        selectedMatch = match;
        showResultsDialog = true;
        StateHasChanged();
    }

    private void ShowEditMatchDialog(Match match)
    {
        selectedMatch = match;
        showEditDialog = true;
        StateHasChanged();
    }

    private async Task DeleteMatch(Match match)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Conferma Eliminazione",
            $"Sei sicuro di voler eliminare questa partita?\n\n{match.Team1.DisplayName} vs {match.Team2.DisplayName}",
            yesText: "Elimina", cancelText: "Annulla");

        if (result == true)
        {
            await MatchService.DeleteMatchAsync(match.Id);
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            currentTournament = await TournamentService.GetCurrentTournamentAsync();
            
            if (currentTournament != null)
            {
                matches = await MatchService.GetMatchesByTournamentAsync(currentTournament.Id);
                tournamentPlayers = await TournamentService.GetTournamentPlayersAsync(currentTournament.Id);
                ApplyFilters((null, null));
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters((int? Round, MatchStatus? Status) filterArgs)
    {
        roundFilter = filterArgs.Round ?? roundFilter;
        statusFilter = filterArgs.Status ?? statusFilter;
        
        filteredMatches = matches.Where(m => 
            (roundFilter == null || m.Round == roundFilter) &&
            (statusFilter == null || m.Status == statusFilter)
        ).ToList();
        
        StateHasChanged();
    }

    private async Task HandleGenerateFromDialog((PairingStrategy strategy, MatchFormat format) parameters)
    {
        if (currentTournament == null) return;
        
        await MatchService.GenerateMatchesAsync(currentTournament.Id, parameters.strategy, parameters.format);
        await LoadData();
        showGenerateDialog = false;
    }

    private async Task SaveResultsFromDialog((Match match, List<MatchSetScore> scores, string? winnerTeamId) resultData)
    {
        if (resultData.match == null) return;
        
        await MatchService.SaveMatchResultsAsync(resultData.match.Id, resultData.scores, resultData.winnerTeamId);
        await LoadData();
        showResultsDialog = false;
    }

    private async Task SaveMatchFromDialog(Match updatedMatch)
    {
        if (updatedMatch == null) return;
        
        await MatchService.UpdateMatchAsync(updatedMatch);
        await LoadData();
        showEditDialog = false;
    }

    private async Task ClearPendingMatches()
    {
        if (currentTournament == null) return;

        bool? result = await DialogService.ShowMessageBox(
            "Conferma Pulizia",
            "Sei sicuro di voler cancellare tutte le partite non completate?",
            yesText: "Conferma", 
            cancelText: "Annulla");

        if (result == true)
        {
            await MatchService.DeleteUncompletedMatchesAsync(currentTournament.Id);
            await LoadData();
        }
    }

    private async Task RecalculateStats()
    {
        if (currentTournament != null)
        {
            await StatsService.CalculatePlayerStatsAsync(currentTournament.Id);
        }
    }
}