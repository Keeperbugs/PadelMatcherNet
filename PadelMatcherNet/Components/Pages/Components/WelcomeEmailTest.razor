@using PadelMatcherNet.Components
@using PadelMatcherNet.Data
@using Microsoft.AspNetCore.Identity

@inject IEmailService EmailService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider

<MudButton class="btn btn-primary" @onclick="SendWelcomeEmail">
    üì© Invia Welcome Email
</MudButton>

@if (message is not null)
{
    <p class="mt-2 text-success">@message</p>
}

@code {
    private string? message;

    private async Task SendWelcomeEmail()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            message = "‚ö†Ô∏è Devi essere autenticato per inviare l'email.";
            return;
        }

        var identityUser = await UserManager.GetUserAsync(user);

        if (identityUser is null)
        {
            message = "‚ùå Errore utente non trovato.";
            return;
        }

        if (!await UserManager.IsEmailConfirmedAsync(identityUser))
        {
            message = "‚ö†Ô∏è L'indirizzo email non √® ancora stato confermato.";
            return;
        }

        await EmailService.SendWelcomeEmailAsync(
            identityUser.Email!,
            identityUser.UserName ?? identityUser.Email!
        );

        message = "‚úÖ Email di benvenuto inviata con successo.";
    }
}
