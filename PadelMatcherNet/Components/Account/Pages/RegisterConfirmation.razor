@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PadelMatcherNet.Data
@using PadelMatcherNet.Services

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IEmailService EmailService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />

@if (emailConfirmationLink is not null)
{
    <p class="text-success">
        📩 Una email di conferma è stata inviata a <strong>@Email</strong>.  
        Clicca il link ricevuto per attivare il tuo account.
    </p>
}
else
{
    <p class="text-danger">
        ⚠️ Errore: non è stato possibile generare il link di conferma.
    </p>
}

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> {
                    ["userId"] = userId,
                    ["code"] = code,
                    ["returnUrl"] = ReturnUrl
                });

            // ✅ Invio dell'email di benvenuto con FluentEmail
            await EmailService.SendAccountConfirmationEmailAsync(
                toEmail: Email,
                name: user.UserName ?? Email,
                confirmationLink: emailConfirmationLink
            );

        }

    }
}
