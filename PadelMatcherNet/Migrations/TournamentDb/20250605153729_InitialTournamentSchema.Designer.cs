// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PadelMatcherNet.Data;

#nullable disable

namespace PadelMatcherNet.Migrations.TournamentDb
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20250605153729_InitialTournamentSchema")]
    partial class InitialTournamentSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("PadelMatcherNet.Models.AppSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("CurrentTournamentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("current_tournament_id");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("darkMode");

                    b.Property<string>("MatchFormat")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("matchFormat");

                    b.Property<string>("PairingStrategy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("pairingStrategy");

                    b.Property<int>("PointsLoss")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pointsLoss");

                    b.Property<int>("PointsTieBreakLoss")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pointsTieBreakLoss");

                    b.Property<int>("PointsWin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pointsWin");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTournamentId");

                    b.ToTable("tournament_settings");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Court")
                        .HasColumnType("TEXT")
                        .HasColumnName("court");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("MatchFormat")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("matchformat");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER")
                        .HasColumnName("round");

                    b.Property<string>("ScoresJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("scores");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("Team1Json")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("team1");

                    b.Property<string>("Team2Json")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("team2");

                    b.Property<string>("TournamentId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tournament_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("WinnerTeamId")
                        .HasColumnType("TEXT")
                        .HasColumnName("winnerteamid");

                    b.HasKey("Id");

                    b.HasIndex("Round");

                    b.HasIndex("Status");

                    b.HasIndex("TournamentId");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Contact")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("GamesLost")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gamesLost");

                    b.Property<int>("GamesWon")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gamesWon");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("matchesPlayed");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("INTEGER")
                        .HasColumnName("matchesWon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nickname");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnName("points");

                    b.Property<int>("SetsLost")
                        .HasColumnType("INTEGER")
                        .HasColumnName("setsLost");

                    b.Property<int>("SetsWon")
                        .HasColumnType("INTEGER")
                        .HasColumnName("setsWon");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("skillLevel");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("surname");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("Nickname");

                    b.HasIndex("Name", "Surname");

                    b.ToTable("players");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.PlayerStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("GamesLost")
                        .HasColumnType("INTEGER")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesWon")
                        .HasColumnType("INTEGER")
                        .HasColumnName("games_won");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("matches_played");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("INTEGER")
                        .HasColumnName("matches_won");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("player_id");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnName("points");

                    b.Property<int>("SetsLost")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sets_lost");

                    b.Property<int>("SetsWon")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sets_won");

                    b.Property<string>("TournamentId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tournament_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("PlayerId", "TournamentId")
                        .IsUnique();

                    b.ToTable("player_stats");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.PlayerTournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("joined_at");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("player_id");

                    b.Property<string>("TournamentId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("PlayerId", "TournamentId")
                        .IsUnique();

                    b.ToTable("player_tournament");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.Tournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_round");

                    b.Property<int>("Days")
                        .HasColumnType("INTEGER")
                        .HasColumnName("days");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<int>("MatchesPerDay")
                        .HasColumnType("INTEGER")
                        .HasColumnName("matches_per_day");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_players");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("PlayerIdsJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("player_ids");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("tournaments");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.AppSettings", b =>
                {
                    b.HasOne("PadelMatcherNet.Models.Tournament", "CurrentTournament")
                        .WithMany()
                        .HasForeignKey("CurrentTournamentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentTournament");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.Match", b =>
                {
                    b.HasOne("PadelMatcherNet.Models.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.PlayerStats", b =>
                {
                    b.HasOne("PadelMatcherNet.Models.Player", "Player")
                        .WithMany("PlayerStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PadelMatcherNet.Models.Tournament", "Tournament")
                        .WithMany("PlayerStats")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.PlayerTournament", b =>
                {
                    b.HasOne("PadelMatcherNet.Models.Player", "Player")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PadelMatcherNet.Models.Tournament", "Tournament")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.Player", b =>
                {
                    b.Navigation("PlayerStats");

                    b.Navigation("PlayerTournaments");
                });

            modelBuilder.Entity("PadelMatcherNet.Models.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("PlayerStats");

                    b.Navigation("PlayerTournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
